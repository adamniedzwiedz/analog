<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Views" xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:lt="clr-namespace:ViewModels.LineTransformers;assembly=ViewModels"
                    xmlns:mahApps="http://metro.mahapps.com/winfx/xaml/controls"

                    xmlns:editors="clr-namespace:ViewModels.Editors;assembly=ViewModels"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:rules="clr-namespace:ViewModels.Rules;assembly=ViewModels"
                    xmlns:cal="http://www.caliburnproject.org"
                    xmlns:converters="clr-namespace:Views.Converters"
                    xmlns:services="clr-namespace:ViewModels.Services;assembly=ViewModels"
                    xmlns:viewModels="clr-namespace:ViewModels;assembly=ViewModels"
                    xmlns:dd="urn:gong-wpf-dragdrop"
                    xmlns:views="clr-namespace:Views"
                    xmlns:ruleModels="clr-namespace:Models.Rules;assembly=Models"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:materialDesignColors="clr-namespace:MaterialDesignColors;assembly=MaterialDesignColors"
                    xmlns:behaviors="clr-namespace:Views.Behaviors"
                    xmlns:customControls="clr-namespace:Views.CustomControls">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

        <!-- Material Design -->
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />

        <!-- Material Design: MahApps Compatibility -->
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Flyout.xaml" />

        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TreeView.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DataGrid.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Expander.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <converters:IsTypeConverter x:Key="IsTypeConverter" />
    <converters:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter" />
    <converters:StringToNullableDateTimeConverter x:Key="StringToNullableDateTimeConverter"/>

    <!-- MahApps Brushes -->
    <SolidColorBrush x:Key="HighlightBrush" Color="{DynamicResource Primary700}"/>
    <SolidColorBrush x:Key="AccentColorBrush" Color="{DynamicResource Primary500}"/>
    <SolidColorBrush x:Key="AccentColorBrush2" Color="{DynamicResource Primary400}"/>
    <SolidColorBrush x:Key="AccentColorBrush3" Color="{DynamicResource Primary300}"/>
    <SolidColorBrush x:Key="AccentColorBrush4" Color="{DynamicResource Primary200}"/>
    <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{DynamicResource Primary700}"/>
    <SolidColorBrush x:Key="AccentSelectedColorBrush" Color="{DynamicResource Primary500Foreground}"/>
    <LinearGradientBrush x:Key="ProgressBrush" EndPoint="0.001,0.5" StartPoint="1.002,0.5">
        <GradientStop Color="{DynamicResource Primary700}" Offset="0"/>
        <GradientStop Color="{DynamicResource Primary300}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="CheckmarkFill" Color="{DynamicResource Primary500}"/>
    <SolidColorBrush x:Key="RightArrowFill" Color="{DynamicResource Primary500}"/>
    <SolidColorBrush x:Key="IdealForegroundColorBrush" Color="{DynamicResource Primary500Foreground}"/>
    <SolidColorBrush x:Key="IdealForegroundDisabledBrush" Color="{DynamicResource Primary500}" Opacity="0.4"/>


    <converters:UpperCaseConverter x:Key="UpperCaseConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>



    <Style x:Key="BottomPanelFlatButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignPaper}"/>
        <Setter Property="materialDesign:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="8,2"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="0">
                            <materialDesign:Ripple 
                                ContentTemplate="{TemplateBinding ContentTemplate}" 
                                Content="{TemplateBinding Content}" 
                                Focusable="False" 
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource Primary400}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type viewModels:ProgressDialogViewModel}">
        <materialDesign:ColorZone Padding="20" MinWidth="200">
            <StackPanel Orientation="Vertical">
                <TextBlock TextAlignment="Center" Text="{Binding Message}" />
                <ProgressBar IsIndeterminate="True" Margin="0 12 0 0" />
            </StackPanel>
        </materialDesign:ColorZone>
    </DataTemplate>



    <DataTemplate DataType="{x:Type rules:TextRuleViewModel}">
        <customControls:EzGrid Columns="Auto,Auto,*" Background="Transparent">
            <materialDesign:PackIcon Kind="CursorText" VerticalAlignment="Center" Width="18" Height="18" />

            <TextBlock Grid.Column="1" Margin="6 0 0 0" Text="{Binding Name}" ToolTip="{Binding Name}" 
                       ToolTipService.Placement="Mouse" 
                       VerticalAlignment="Center"
                       TextTrimming="CharacterEllipsis" />

            <TextBox Margin="4,0,4,0" Grid.Column="2" VerticalAlignment="Center"  Foreground="DarkBlue"
                     BorderThickness="0" Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}">
                <i:Interaction.Behaviors>
                    <behaviors:BindableFocusBehavior HasFocus="{Binding IsFocused}"/>
                </i:Interaction.Behaviors>
            </TextBox>
          
        </customControls:EzGrid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type rules:DateRuleViewModel}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <materialDesign:PackIcon Kind="Calendar" VerticalAlignment="Center" Width="18" Height="18" />
            <TextBlock Margin="6 0 0 0" Text="{Binding Name}" ToolTip="{Binding Name}" ToolTipService.Placement="Mouse" TextTrimming="CharacterEllipsis" Grid.Column="1" VerticalAlignment="Center" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type rules:RegexRuleViewModel}">
        <customControls:EzGrid Columns="Auto,Auto,*" Background="Transparent">
            <materialDesign:PackIcon Kind="Regex" VerticalAlignment="Center" Width="18" Height="18" />
            <TextBlock Margin="6 0 0 0" Text="{Binding Name}" ToolTip="{Binding Name}" ToolTipService.Placement="Mouse" TextTrimming="CharacterEllipsis" Grid.Column="1" VerticalAlignment="Center" />
            <TextBox Margin="4,0,4,0" Grid.Column="2" VerticalAlignment="Center"  Foreground="DarkBlue"
                     BorderThickness="0" Text="{Binding Pattern, UpdateSourceTrigger=PropertyChanged}">
                <i:Interaction.Behaviors>
                    <behaviors:BindableFocusBehavior HasFocus="{Binding IsFocused}"/>
                </i:Interaction.Behaviors>
            </TextBox>
        </customControls:EzGrid>
    </DataTemplate>


    <DataTemplate DataType="{x:Type lt:ILineTransformer}">
        <TextBlock Text="{Binding Name}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type editors:EnumEditor}">
        <ComboBox HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" SelectedItem="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding EnumValues}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type editors:IntegerEditor}">
        <TextBox FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}" 
                 mahApps:TextBoxHelper.IsMonitoring="True"
                 mahApps:TextBoxHelper.SelectAllOnFocus="True"
                 materialDesign:TextFieldAssist.DecorationVisibility="Collapsed"
                 BorderThickness="0"
                 Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=100}"  />
    </DataTemplate>

    <DataTemplate DataType="{x:Type editors:BooleanEditor}">
        <ToggleButton IsChecked="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type editors:DateTimeEditor}">
        <TextBox mahApps:TextBoxHelper.IsMonitoring="True" 
                 mahApps:TextBoxHelper.SelectAllOnFocus="True" 
                 FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}" 
                 Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=LostFocus, Converter={StaticResource StringToNullableDateTimeConverter}}" />
        <!--<StackPanel Orientation="Vertical">
            <DatePicker 
                SelectedDate="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                DisplayDate="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                DisplayDateStart="{Binding StartDate, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                DisplayDateEnd="{Binding EndDate, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                FirstDayOfWeek="Monday"
                SelectedDateFormat="Short"  />
            <materialDesign:TimePicker SelectedTime="{Binding Value,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Is24Hours="True" SelectedTimeFormat="Short" />
        </StackPanel>-->
    </DataTemplate>

    <DataTemplate DataType="{x:Type editors:StringEditor}">
        <TextBox FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}" Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=100}" />
    </DataTemplate>

    <DataTemplate x:Key="PropertyHeaderTemplate" DataType="{x:Type editors:IEditor}" >
        <DataTemplate.Resources>
            <DataTemplate DataType="{x:Type system:Boolean}" >
                <ToggleButton IsChecked="{Binding Path=., Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate DataType="{x:Type system:DateTime}" >
                <TextBlock Text="{Binding Path=., Mode=OneWay, StringFormat='{}{0: yyyy-MM-dd HH:mm:ss}'}" />
            </DataTemplate>
        </DataTemplate.Resources>
        <ContentPresenter Content="{Binding Value, Mode=OneWay}"  />
    </DataTemplate>

    <DataTemplate x:Key="PropertyEditorTemplate" DataType="{x:Type editors:IEditor}">
        <ContentPresenter Content="{Binding }"  />
    </DataTemplate>


  
    <Style x:Key="IRuleParentMenuItemStyle" TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=., Converter={StaticResource IsTypeConverter}, ConverterParameter={x:Type rules:RuleParentViewModelBase}}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RuleMenuItemStyle" TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=., Converter={StaticResource IsTypeConverter}, ConverterParameter={x:Type rules:RuleParentViewModelBase}}" Value="False">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate DataType="{x:Type viewModels:SaveRuleViewModel}">
        <materialDesign:ColorZone Padding="10" MinWidth="300">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <TextBlock Grid.Column="0" Grid.Row="0" Text="Name:" VerticalAlignment="Center" />
                <TextBox Grid.Column="2" Grid.Row="0" Text="{Binding Name, Mode=TwoWay}" mahApps:TextBoxHelper.IsMonitoring="True" mahApps:TextBoxHelper.SelectAllOnFocus="True" />

                <TextBlock Grid.Column="0" Grid.Row="1" Text="Provider:" VerticalAlignment="Center" />
                <ComboBox Grid.Column="2" Grid.Row="1" Margin="0 10" SelectedItem="{Binding SelectedRuleProvider}" ItemsSource="{Binding RulesProviders}" >
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <StackPanel Grid.Row="2" Grid.ColumnSpan="3" Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button Style="{StaticResource MaterialDesignFlatButton}" Content="SAVE" cal:Message.Attach="Commit($view)" />
                    <Button Style="{StaticResource MaterialDesignFlatButton}" Content="CANCEL" Margin="8 0 0 0" cal:Message.Attach="Close($view)" />
                </StackPanel>
            </Grid>
        </materialDesign:ColorZone>
    </DataTemplate>
    <DataTemplate DataType="{x:Type viewModels:LoadRuleViewModel}">
        <materialDesign:ColorZone Padding="10" MinWidth="300" MinHeight="250">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition  Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <DataGrid SelectionMode="Extended" AutoGenerateColumns="False" ItemsSource="{Binding Rules}" >
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Binding="{Binding IsSelected}"  
                                                Header="Is Selected"
                                                ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}"
                                                EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}" />

                        <DataGridTextColumn IsReadOnly="True" Header="Group" Binding="{Binding RuleInfo.Group}" />
                        <DataGridTextColumn IsReadOnly="True" Header="Name" Binding="{Binding RuleInfo.Rule.Name}" />
                        <DataGridTextColumn IsReadOnly="True" Header="Author" Binding="{Binding RuleInfo.Author}" />
                        <DataGridTextColumn IsReadOnly="True" Header="Date created" Binding="{Binding RuleInfo.DateCreated}" />
                        <DataGridTextColumn IsReadOnly="True" Header="Date updated" Binding="{Binding RuleInfo.DateUpdated}" />
                    </DataGrid.Columns>
                </DataGrid>


                <Button Grid.Row="1"  Style="{StaticResource MaterialDesignFlatButton}" Content="OK" HorizontalAlignment="Right" cal:Message.Attach="Close($view)" />

            </Grid>
        </materialDesign:ColorZone>
    </DataTemplate>


    <DataTemplate x:Key="EffectMoveAdornerTemplate">
        <materialDesign:ColorZone CornerRadius="2" Mode="Dark" Padding="4 2">
            <StackPanel Orientation="Horizontal">
                <materialDesign:PackIcon Kind="ArrowRight" VerticalAlignment="Center" />
                <TextBlock Text="Move" VerticalAlignment="Center" Margin="4 0 0 0" />
            </StackPanel>
        </materialDesign:ColorZone>
    </DataTemplate>

    <Style x:Key="AnalogRuleExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="2,6,2,6">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              VerticalAlignment="Center"
                                              Margin="0,0,8,0" />
                            <ToggleButton Grid.Column="1"
                                          VerticalAlignment="Center"
                                          Visibility="Collapsed"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource MaterialDesignExpanderToggleButton}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AnalogRuleExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" To="Expanded">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Collapsed">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="0" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="1" Duration="0"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="0" Duration="0"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <DockPanel Background="{TemplateBinding Background}">
                            <ToggleButton Name="HeaderSite"
                                              DockPanel.Dock="Top"
                                              BorderThickness="0" Cursor="Hand"
                                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource MaterialDesignExpanderDownHeaderStyle}"
                                              TextElement.FontSize="15"
                                              Opacity=".87"
                                              Foreground="{TemplateBinding Foreground}"
                                              Content="{TemplateBinding Header}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"/>
                            <Border Name="ContentSite"
                                        DockPanel.Dock="Bottom"                                    >
                                <StackPanel Name="ContentPanel"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Margin="{TemplateBinding Padding}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <StackPanel.Height>
                                        <MultiBinding Converter="{StaticResource MathMlpMultipleConverter}">
                                            <Binding ElementName="PART_Content" Path="ActualHeight"/>
                                            <Binding ElementName="PART_Content" Path="Opacity"/>
                                        </MultiBinding>
                                    </StackPanel.Height>
                                    <StackPanel.Width>
                                        <MultiBinding Converter="{StaticResource MathMlpMultipleConverter}">
                                            <Binding ElementName="PART_Content" Path="ActualWidth"/>
                                            <Binding ElementName="PART_Content" Path="Opacity"/>
                                        </MultiBinding>
                                    </StackPanel.Width>
                                    <ContentPresenter Name="PART_Content" Focusable="False"
                                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                                </StackPanel>
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                            <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderRightHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                            <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderLeftHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                            <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MaterialDesignExpanderUpHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                            <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource AnalogRuleExpanderDownHeaderStyle}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>